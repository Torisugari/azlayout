/* 
 *    Copyright (C) 2014 Torisugari <torisugari@gmail.com>
 *
 *     Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 *     The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 *    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
#include <stdlib.h>
#include "utr50.h"

namespace utr50 {

struct Item {
  unsigned int mStart;
  unsigned int mEnd;
  property mProperty;
};

int compare(const void* aKey, const void* aItem) {
  const Item* key = static_cast<const Item*>(aKey);
  const Item* item = static_cast<const Item*>(aItem);

  if (key->mStart < item->mStart) {
    return -1;
  }
  else if (item->mEnd < key->mStart) {
    return 1;
  }

  return 0;
}

static const Item gTable[] = {
  {0x0, 0xa6, R},
  {0xa7, 0xa7, U},
  {0xa8, 0xa8, R},
  {0xa9, 0xa9, U},
  {0xaa, 0xad, R},
  {0xae, 0xae, U},
  {0xaf, 0xb0, R},
  {0xb1, 0xb1, U},
  {0xb2, 0xbb, R},
  {0xbc, 0xbe, U},
  {0xbf, 0xd6, R},
  {0xd7, 0xd7, U},
  {0xd8, 0xf6, R},
  {0xf7, 0xf7, U},
  {0xf8, 0x2e9, R},
  {0x2ea, 0x2eb, U},
  {0x2ec, 0x10ff, R},
  {0x1100, 0x11ff, U},
  {0x1200, 0x1400, R},
  {0x1401, 0x167f, U},
  {0x1680, 0x18af, R},
  {0x18b0, 0x18ff, U},
  {0x1900, 0x2015, R},
  {0x2016, 0x2016, U},
  {0x2017, 0x201f, R},
  {0x2020, 0x2021, U},
  {0x2022, 0x202f, R},
  {0x2030, 0x2031, U},
  {0x2032, 0x203a, R},
  {0x203b, 0x203c, U},
  {0x203d, 0x2041, R},
  {0x2042, 0x2042, U},
  {0x2043, 0x2046, R},
  {0x2047, 0x2049, U},
  {0x204a, 0x2050, R},
  {0x2051, 0x2051, U},
  {0x2052, 0x2064, R},
  {0x2065, 0x2065, U},
  {0x2066, 0x20dc, R},
  {0x20dd, 0x20e0, U},
  {0x20e1, 0x20e1, R},
  {0x20e2, 0x20e4, U},
  {0x20e5, 0x20ff, R},
  {0x2100, 0x2101, U},
  {0x2102, 0x2102, R},
  {0x2103, 0x2109, U},
  {0x210a, 0x210e, R},
  {0x210f, 0x210f, U},
  {0x2110, 0x2112, R},
  {0x2113, 0x2114, U},
  {0x2115, 0x2115, R},
  {0x2116, 0x2117, U},
  {0x2118, 0x211d, R},
  {0x211e, 0x2123, U},
  {0x2124, 0x2124, R},
  {0x2125, 0x2125, U},
  {0x2126, 0x2126, R},
  {0x2127, 0x2127, U},
  {0x2128, 0x2128, R},
  {0x2129, 0x2129, U},
  {0x212a, 0x212d, R},
  {0x212e, 0x212e, U},
  {0x212f, 0x2134, R},
  {0x2135, 0x213f, U},
  {0x2140, 0x2144, R},
  {0x2145, 0x214a, U},
  {0x214b, 0x214b, R},
  {0x214c, 0x214d, U},
  {0x214e, 0x214e, R},
  {0x214f, 0x218f, U},
  {0x2190, 0x221d, R},
  {0x221e, 0x221e, U},
  {0x221f, 0x2233, R},
  {0x2234, 0x2235, U},
  {0x2236, 0x22ff, R},
  {0x2300, 0x2307, U},
  {0x2308, 0x230b, R},
  {0x230c, 0x231f, U},
  {0x2320, 0x2323, R},
  {0x2324, 0x2328, U},
  {0x2329, 0x232a, Tr},
  {0x232b, 0x232b, U},
  {0x232c, 0x237c, R},
  {0x237d, 0x239a, U},
  {0x239b, 0x23bd, R},
  {0x23be, 0x23cd, U},
  {0x23ce, 0x23ce, R},
  {0x23cf, 0x23cf, U},
  {0x23d0, 0x23d0, R},
  {0x23d1, 0x23db, U},
  {0x23dc, 0x23e1, R},
  {0x23e2, 0x2422, U},
  {0x2423, 0x2423, R},
  {0x2424, 0x24ff, U},
  {0x2500, 0x259f, R},
  {0x25a0, 0x2619, U},
  {0x261a, 0x261f, R},
  {0x2620, 0x2767, U},
  {0x2768, 0x2775, R},
  {0x2776, 0x2793, U},
  {0x2794, 0x2b11, R},
  {0x2b12, 0x2b2f, U},
  {0x2b30, 0x2b4f, R},
  {0x2b50, 0x2b59, U},
  {0x2b5a, 0x2bb7, R},
  {0x2bb8, 0x2bff, U},
  {0x2c00, 0x2e7f, R},
  {0x2e80, 0x3000, U},
  {0x3001, 0x3002, Tu},
  {0x3003, 0x3007, U},
  {0x3008, 0x3011, Tr},
  {0x3012, 0x3013, U},
  {0x3014, 0x301f, Tr},
  {0x3020, 0x302f, U},
  {0x3030, 0x3030, Tr},
  {0x3031, 0x3040, U},
  {0x3041, 0x3041, Tu},
  {0x3042, 0x3042, U},
  {0x3043, 0x3043, Tu},
  {0x3044, 0x3044, U},
  {0x3045, 0x3045, Tu},
  {0x3046, 0x3046, U},
  {0x3047, 0x3047, Tu},
  {0x3048, 0x3048, U},
  {0x3049, 0x3049, Tu},
  {0x304a, 0x3062, U},
  {0x3063, 0x3063, Tu},
  {0x3064, 0x3082, U},
  {0x3083, 0x3083, Tu},
  {0x3084, 0x3084, U},
  {0x3085, 0x3085, Tu},
  {0x3086, 0x3086, U},
  {0x3087, 0x3087, Tu},
  {0x3088, 0x308d, U},
  {0x308e, 0x308e, Tu},
  {0x308f, 0x3094, U},
  {0x3095, 0x3096, Tu},
  {0x3097, 0x309a, U},
  {0x309b, 0x309c, Tu},
  {0x309d, 0x309f, U},
  {0x30a0, 0x30a0, Tr},
  {0x30a1, 0x30a1, Tu},
  {0x30a2, 0x30a2, U},
  {0x30a3, 0x30a3, Tu},
  {0x30a4, 0x30a4, U},
  {0x30a5, 0x30a5, Tu},
  {0x30a6, 0x30a6, U},
  {0x30a7, 0x30a7, Tu},
  {0x30a8, 0x30a8, U},
  {0x30a9, 0x30a9, Tu},
  {0x30aa, 0x30c2, U},
  {0x30c3, 0x30c3, Tu},
  {0x30c4, 0x30e2, U},
  {0x30e3, 0x30e3, Tu},
  {0x30e4, 0x30e4, U},
  {0x30e5, 0x30e5, Tu},
  {0x30e6, 0x30e6, U},
  {0x30e7, 0x30e7, Tu},
  {0x30e8, 0x30ed, U},
  {0x30ee, 0x30ee, Tu},
  {0x30ef, 0x30f4, U},
  {0x30f5, 0x30f6, Tu},
  {0x30f7, 0x30fb, U},
  {0x30fc, 0x30fc, Tr},
  {0x30fd, 0x3126, U},
  {0x3127, 0x3127, Tu},
  {0x3128, 0x31ef, U},
  {0x31f0, 0x31ff, Tu},
  {0x3200, 0x32ff, U},
  {0x3300, 0x3357, Tu},
  {0x3358, 0x337a, U},
  {0x337b, 0x337f, Tu},
  {0x3380, 0xa4cf, U},
  {0xa4d0, 0xa95f, R},
  {0xa960, 0xa97f, U},
  {0xa980, 0xabff, R},
  {0xac00, 0xd7ff, U},
  {0xd800, 0xdfff, R},
  {0xe000, 0xfaff, U},
  {0xfb00, 0xfe0f, R},
  {0xfe10, 0xfe1f, U},
  {0xfe20, 0xfe2f, R},
  {0xfe30, 0xfe48, U},
  {0xfe49, 0xfe4f, R},
  {0xfe50, 0xfe52, Tu},
  {0xfe53, 0xfe57, U},
  {0xfe58, 0xfe58, R},
  {0xfe59, 0xfe5e, Tr},
  {0xfe5f, 0xfe62, U},
  {0xfe63, 0xfe66, R},
  {0xfe67, 0xfe6f, U},
  {0xfe70, 0xff00, R},
  {0xff01, 0xff01, Tu},
  {0xff02, 0xff07, U},
  {0xff08, 0xff09, Tr},
  {0xff0a, 0xff0b, U},
  {0xff0c, 0xff0c, Tu},
  {0xff0d, 0xff0d, R},
  {0xff0e, 0xff0e, Tu},
  {0xff0f, 0xff19, U},
  {0xff1a, 0xff1b, Tr},
  {0xff1c, 0xff1e, R},
  {0xff1f, 0xff1f, Tu},
  {0xff20, 0xff3a, U},
  {0xff3b, 0xff3b, Tr},
  {0xff3c, 0xff3c, U},
  {0xff3d, 0xff3d, Tr},
  {0xff3e, 0xff3e, U},
  {0xff3f, 0xff3f, Tr},
  {0xff40, 0xff5a, U},
  {0xff5b, 0xff60, Tr},
  {0xff61, 0xffdf, R},
  {0xffe0, 0xffe2, U},
  {0xffe3, 0xffe3, Tr},
  {0xffe4, 0xffe7, U},
  {0xffe8, 0xffef, R},
  {0xfff0, 0xfff8, U},
  {0xfff9, 0xfffb, R},
  {0xfffc, 0xfffd, U},
  {0xfffe, 0x1093f, R},
  {0x10980, 0x1099f, U},
  {0x109a0, 0x114df, R},
  {0x11580, 0x115ff, U},
  {0x11600, 0x1247f, R},
  {0x13000, 0x1342f, U},
  {0x16800, 0x16f9f, R},
  {0x1b000, 0x1b0ff, U},
  {0x1bc00, 0x1bcaf, R},
  {0x1d000, 0x1d1ff, U},
  {0x1d200, 0x1d24f, R},
  {0x1d300, 0x1d37f, U},
  {0x1d400, 0x1e8df, R},
  {0x1f000, 0x1f1ff, U},
  {0x1f200, 0x1f201, Tu},
  {0x1f202, 0x1f7ff, U},
  {0x1f800, 0x1f8ff, R},
  {0x20000, 0x3fffd, U},
  {0xe0000, 0xe01ef, R},
  {0xf0000, 0x10fffd, U}
};

static const unsigned int gCount = 239;

property getProperty(const unsigned int aUnicodeCodePoint) {
  const Item key({aUnicodeCodePoint, aUnicodeCodePoint, R});
  void* found = bsearch(&key, gTable, gCount, sizeof(Item), compare);
  return static_cast<const Item*>(found)->mProperty;
}

} //namespace utr50

